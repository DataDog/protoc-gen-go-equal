package main

import (
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
)

var isLocalPackage = make(map[string]bool)

func main() {
	opts := protogen.Options{}
	opts.Run(func(gen *protogen.Plugin) error {

		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			isLocalPackage[string(f.Desc.Package())] = true
		}

		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}

			out := f.GeneratedFilenamePrefix + "_equal.pb.go"
			g := gen.NewGeneratedFile(out, f.GoImportPath)

			g.P(`// Code generated by protoc-gen-equal-go. DO NOT EDIT.`)
			g.P(`// source: ` + *f.Proto.Name)
			g.P()
			g.P(`package ` + f.GoPackageName)

			proto3 := f.Desc.Syntax() == protoreflect.Proto3
			genEqual(g, f.Messages, proto3)
		}
		return nil
	})
}
